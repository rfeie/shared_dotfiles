#!/bin/bash

# Pull in aliases
[[ -s ~/shared_dotfiles/.shared_aliases ]] && source ~/shared_dotfiles/.shared_aliases

# Prompt customization
export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced

function killonport {
    echo "Finding processes running on port $1"
    lsof -i :$1
    echo "Killing processes"
    kill -9 $(lsof -i :$1 | awk '/\d+/ {print $2}')
}
function prompt {
  local BLACK="\[\033[0;30m\]"
  local BLACKBOLD="\[\033[1;30m\]"
  local RED="\[\033[0;31m\]"
  local REDBOLD="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local GREENBOLD="\[\033[1;32m\]"
  local YELLOW="\[\033[0;33m\]"
  local YELLOWBOLD="\[\033[1;33m\]"
  local BLUE="\[\033[0;34m\]"
  local BLUEBOLD="\[\033[1;34m\]"
  local PURPLE="\[\033[0;35m\]"
  local PURPLEBOLD="\[\033[1;35m\]"
  local CYAN="\[\033[0;36m\]"
  local CYANBOLD="\[\033[1;36m\]"
  local WHITE="\[\033[0;37m\]"
  local WHITEBOLD="\[\033[1;37m\]"
  local RESETCOLOR="\[\e[00m\]"

  export PS1="\n$RED\u $PURPLE@ $GREEN\w $RESETCOLOR$GREENBOLD\$(git branch 2> /dev/null)\n ¯\_(ツ)_/¯ → $RESETCOLOR "
  export PS2=" | → $RESETCOLOR"
  # echo "\n${RED}\e[40m\u $PURPLE@ $GREEN\w $RESETCOLOR$GREENBOLD\$(git branch 2> /dev/null)\n ✨  $BLUE[\#] → $RESETCOLOR  "
}

# bash scripts path
export PATH=$PATH:~/shared_dotfiles/scripts

function notify {
    local title="${2:-Hey its done.}"
    local message="${1:-Whatever you wanted to do is over}"
    # ${1:-DEFAULTVALUE}
    osascript -e "display notification \"$message\" with title \"$title\""

}

function branchExists {

    if [ $# -eq 1 ]; then
        remote=origin
            branch=$1
            elif [ $# -eq 2 ]; then
            remote=$1
            branch=$2
    else
        echo "incorrect usage"
    exit 2
        fi
        git show-ref --quiet --verify -- "refs/remotes/$remote/$branch"

}

function getTrunk {

    if [ $# -eq 1 ]; then
        branch=$1
    else
        branch=master
            fi
            git checkout $branch && git pull origin $branch

}
function makeFreshBranch {

    if [ $# -eq 0 ]; then
echo "Need a branch name"

exit 2
    else
        branch=master
            fi
            getTrunk $branch
            git checkout -b $1

}
function grebase {

    if [ $# -eq 1 ]; then
        branch=$1
    else
        branch=master
            fi
            git fetch && git rebase origin "$branch"

}
function gpush {
    local branch_name=$(git branch | grep \* | cut -d ' ' -f2)
        branchExists 'origin' "$branch_name"
        if [ $? -eq 0 ]; then
            echo "gpush:: branch exists"
                repo_name=$(git push -f origin $branch_name | sed -e 's/.*\/\([^\/]*\)\.git/\1/')
                open "https://code.devsnc.com/dev/$repo_name/pull/$branch_name"
        else 
            echo "gpush:: branch doesnt exists"
                repo_name=$(git push -u origin $branch_name | sed -e 's/.*\/\([^\/]*\)\.git/\1/')
                open https://code.devsnc.com/dev/$repo_name/pull/$branch_name
                fi
}
